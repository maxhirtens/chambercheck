generator client {
  provider = "prisma-client-js"
}

// dev db
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// prod db
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Review {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  locationName    String
  locationAddress String
  placeId         String
  rating          Int
  content         String?  @db.VarChar(240)
  accessible      Boolean? @default(false)
  changingTable   Boolean? @default(false)
  genderNeutral   Boolean? @default(false)
  clothTowels     Boolean? @default(false)
  handDryer       Boolean? @default(false)
  notClean        Boolean? @default(false)
  published       Boolean  @default(false)
  viewCount       Int      @default(0)
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
